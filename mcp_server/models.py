# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:28:04+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class ActiveContextName(
    RootModel[constr(pattern=r'^([A-Za-z]_?)+$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^([A-Za-z]_?)+$', min_length=1, max_length=100)


class ActiveContextTimeToLiveInSeconds(RootModel[conint(ge=5, le=86400)]):
    root: conint(ge=5, le=86400)


class ActiveContextTurnsToLive(RootModel[conint(ge=1, le=20)]):
    root: conint(ge=1, le=20)


class AttachmentTitle(RootModel[constr(min_length=1, max_length=250)]):
    root: constr(min_length=1, max_length=250)


class AttachmentUrl(RootModel[constr(min_length=1, max_length=250)]):
    root: constr(min_length=1, max_length=250)


class BadGatewayException(RootModel[Any]):
    root: Any


class BlobStream(RootModel[str]):
    root: str


class BotAliasIdentifier(RootModel[str]):
    root: str


class BotIdentifier(
    RootModel[constr(pattern=r'^[0-9a-zA-Z]+$', min_length=10, max_length=10)]
):
    root: constr(pattern=r'^[0-9a-zA-Z]+$', min_length=10, max_length=10)


class ButtonText(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class ButtonValue(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class ConfirmationState(Enum):
    Confirmed = 'Confirmed'
    Denied = 'Denied'
    None_ = 'None'


class ConflictException(RootModel[Any]):
    root: Any


class DeleteSessionRequest(BaseModel):
    pass


class DependencyFailedException(RootModel[Any]):
    root: Any


class DialogActionType(Enum):
    Close = 'Close'
    ConfirmIntent = 'ConfirmIntent'
    Delegate = 'Delegate'
    ElicitIntent = 'ElicitIntent'
    ElicitSlot = 'ElicitSlot'
    None_ = 'None'


class Double(RootModel[float]):
    root: float


class GetSessionRequest(BaseModel):
    pass


class IntentState(Enum):
    Failed = 'Failed'
    Fulfilled = 'Fulfilled'
    InProgress = 'InProgress'
    ReadyForFulfillment = 'ReadyForFulfillment'
    Waiting = 'Waiting'
    FulfillmentInProgress = 'FulfillmentInProgress'


class InternalServerException(RootModel[Any]):
    root: Any


class LocaleId(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class MessageContentType(Enum):
    CustomPayload = 'CustomPayload'
    ImageResponseCard = 'ImageResponseCard'
    PlainText = 'PlainText'
    SSML = 'SSML'


class Name(
    RootModel[constr(pattern=r'^([0-9a-zA-Z][_-]?)+$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^([0-9a-zA-Z][_-]?)+$', min_length=1, max_length=100)


class NonEmptyString(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class ParameterName(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class PutSessionResponse(BaseModel):
    audioStream: Optional[BlobStream] = None


class RecognizeUtteranceRequest(BaseModel):
    inputStream: Optional[BlobStream] = None


class RecognizeUtteranceResponse(BaseModel):
    audioStream: Optional[BlobStream] = None


class RecognizedBotMember(BaseModel):
    botId: BotIdentifier
    botName: Optional[Name] = None


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RuntimeHintPhrase(RootModel[constr(min_length=1, max_length=140)]):
    root: constr(min_length=1, max_length=140)


class RuntimeHintValue(BaseModel):
    phrase: RuntimeHintPhrase


class RuntimeHintValuesList(RootModel[List[RuntimeHintValue]]):
    root: List[RuntimeHintValue] = Field(..., max_length=100, min_length=1)


class SensitiveNonEmptyString(RootModel[SecretStr]):
    root: SecretStr


class SentimentScore(BaseModel):
    mixed: Optional[Double] = None
    negative: Optional[Double] = None
    neutral: Optional[Double] = None
    positive: Optional[Double] = None


class SentimentType(Enum):
    MIXED = 'MIXED'
    NEGATIVE = 'NEGATIVE'
    NEUTRAL = 'NEUTRAL'
    POSITIVE = 'POSITIVE'


class SessionId(
    RootModel[constr(pattern=r'[0-9a-zA-Z._:-]+', min_length=2, max_length=100)]
):
    root: constr(pattern=r'[0-9a-zA-Z._:-]+', min_length=2, max_length=100)


class Shape(Enum):
    Scalar = 'Scalar'
    List = 'List'
    Composite = 'Composite'


class String(RootModel[str]):
    root: str


class StringList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString]


class StringMap(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class StyleType(Enum):
    Default = 'Default'
    SpellByLetter = 'SpellByLetter'
    SpellByWord = 'SpellByWord'


class Text(RootModel[SecretStr]):
    root: SecretStr


class ThrottlingException(RootModel[Any]):
    root: Any


class ValidationException(RootModel[Any]):
    root: Any


class Value(BaseModel):
    interpretedValue: NonEmptyString
    originalValue: Optional[NonEmptyString] = None
    resolvedValues: Optional[StringList] = None


class BotsBotIdBotAliasesBotAliasIdBotLocalesLocaleIdSessionsSessionIdUtteranceContentTypePostRequest(
    BaseModel
):
    inputStream: Optional[str] = Field(
        None,
        description='User input in PCM or Opus audio format or text format as described in the <code>requestContentType</code> parameter.',
    )


class ActiveContextParametersMap(RootModel[Optional[Dict[str, Text]]]):
    root: Optional[Dict[str, Text]] = None


class ActiveContextTimeToLive(BaseModel):
    timeToLiveInSeconds: ActiveContextTimeToLiveInSeconds
    turnsToLive: ActiveContextTurnsToLive


class Button(BaseModel):
    text: ButtonText
    value: ButtonValue


class ButtonsList(RootModel[List[Button]]):
    root: List[Button] = Field(..., max_length=5, min_length=0)


class ConfidenceScore(BaseModel):
    score: Optional[Double] = None


class DeleteSessionResponse(BaseModel):
    botAliasId: Optional[BotAliasIdentifier] = None
    botId: Optional[BotIdentifier] = None
    localeId: Optional[LocaleId] = None
    sessionId: Optional[SessionId] = None


class ElicitSubSlot(BaseModel):
    name: NonEmptyString
    subSlotToElicit: Optional[ElicitSubSlot] = None


class ImageResponseCard(BaseModel):
    buttons: Optional[ButtonsList] = None
    imageUrl: Optional[AttachmentUrl] = None
    subtitle: Optional[AttachmentTitle] = None
    title: AttachmentTitle


class Message(BaseModel):
    content: Optional[Text] = None
    contentType: MessageContentType
    imageResponseCard: Optional[ImageResponseCard] = None


class Messages(RootModel[List[Message]]):
    root: List[Message] = Field(..., max_length=10)


class SentimentResponse(BaseModel):
    sentiment: Optional[SentimentType] = None
    sentimentScore: Optional[SentimentScore] = None


class ActiveContext(BaseModel):
    contextAttributes: ActiveContextParametersMap
    name: ActiveContextName
    timeToLive: ActiveContextTimeToLive


class ActiveContextsList(RootModel[List[ActiveContext]]):
    root: List[ActiveContext] = Field(..., max_length=20, min_length=0)


class DialogAction(BaseModel):
    slotElicitationStyle: Optional[StyleType] = None
    slotToElicit: Optional[NonEmptyString] = None
    subSlotToElicit: Optional[ElicitSubSlot] = None
    type: DialogActionType


class GetSessionResponse(BaseModel):
    interpretations: Optional[Interpretations] = None
    messages: Optional[Messages] = None
    sessionId: Optional[NonEmptyString] = None
    sessionState: Optional[SessionState] = None


class Intent(BaseModel):
    confirmationState: Optional[ConfirmationState] = None
    name: NonEmptyString
    slots: Optional[Slots] = None
    state: Optional[IntentState] = None


class Interpretation(BaseModel):
    intent: Optional[Intent] = None
    nluConfidence: Optional[ConfidenceScore] = None
    sentimentResponse: Optional[SentimentResponse] = None


class Interpretations(RootModel[List[Interpretation]]):
    root: List[Interpretation] = Field(..., max_length=5)


class PutSessionRequest(BaseModel):
    messages: Optional[Messages] = None
    requestAttributes: Optional[StringMap] = None
    sessionState: SessionState


class RecognizeTextRequest(BaseModel):
    requestAttributes: Optional[StringMap] = None
    sessionState: Optional[SessionState] = None
    text: Text


class RecognizeTextResponse(BaseModel):
    interpretations: Optional[Interpretations] = None
    messages: Optional[Messages] = None
    recognizedBotMember: Optional[RecognizedBotMember] = None
    requestAttributes: Optional[StringMap] = None
    sessionId: Optional[SessionId] = None
    sessionState: Optional[SessionState] = None


class RuntimeHintDetails(BaseModel):
    runtimeHintValues: Optional[RuntimeHintValuesList] = None
    subSlotHints: Optional[SlotHintsSlotMap] = None


class RuntimeHints(BaseModel):
    slotHints: Optional[SlotHintsIntentMap] = None


class SessionState(BaseModel):
    activeContexts: Optional[ActiveContextsList] = None
    dialogAction: Optional[DialogAction] = None
    intent: Optional[Intent] = None
    originatingRequestId: Optional[NonEmptyString] = None
    runtimeHints: Optional[RuntimeHints] = None
    sessionAttributes: Optional[StringMap] = None


class Slot(BaseModel):
    subSlots: Optional[Slots] = None
    value: Optional[Value] = None
    values: Optional[Values] = None


class SlotHintsIntentMap(RootModel[Optional[Dict[str, SlotHintsSlotMap]]]):
    root: Optional[Dict[str, SlotHintsSlotMap]] = None


class SlotHintsSlotMap(RootModel[Optional[Dict[str, RuntimeHintDetails]]]):
    root: Optional[Dict[str, RuntimeHintDetails]] = None


class Slots(RootModel[Optional[Dict[str, Slot]]]):
    root: Optional[Dict[str, Slot]] = None


class Values(RootModel[List[Slot]]):
    root: List[Slot]


class BotsBotIdBotAliasesBotAliasIdBotLocalesLocaleIdSessionsSessionIdPostRequest(
    BaseModel
):
    messages: Optional[List[Message]] = Field(
        None,
        description='A list of messages to send to the user. Messages are sent in the order that they are defined in the list.',
        max_length=10,
    )
    requestAttributes: Optional[Dict[str, String]] = Field(
        None,
        description="<p>Request-specific information passed between Amazon Lex V2 and the client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p>",
    )
    sessionState: SessionState = Field(
        ..., description="The state of the user's session with Amazon Lex V2."
    )


class BotsBotIdBotAliasesBotAliasIdBotLocalesLocaleIdSessionsSessionIdTextPostRequest(
    BaseModel
):
    requestAttributes: Optional[Dict[str, String]] = Field(
        None,
        description="<p>Request-specific information passed between the client application and Amazon Lex V2 </p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p>",
    )
    sessionState: Optional[SessionState] = Field(
        None, description="The state of the user's session with Amazon Lex V2."
    )
    text: SecretStr = Field(
        ...,
        description='The text that the user entered. Amazon Lex V2 interprets this text.',
    )


ElicitSubSlot.model_rebuild()
GetSessionResponse.model_rebuild()
Intent.model_rebuild()
PutSessionRequest.model_rebuild()
RecognizeTextRequest.model_rebuild()
RecognizeTextResponse.model_rebuild()
RuntimeHintDetails.model_rebuild()
RuntimeHints.model_rebuild()
Slot.model_rebuild()
SlotHintsIntentMap.model_rebuild()
